this project is based entirely on "Django-HTMX-Finance-App" from "bugbytes-io"
link to their github: https://github.com/bugbytes-io

static assets downloaded:
money-pay-svgrepo-com.svg was downloaded from: https://www.svgrepo.com/svg/215153/money-pay


using tailwind v3
and daisyui
and htmx


superuser:
user01
user01@admin.com
123



- to enter enhanced shell (provided by django_extensions):
> python manage.py shell_plus



update transaction process breakdown:
    1. a GET request to update-transaction url is sent, along with transaction pk (from template), it will use the pk to get the item instance from database
    2. a partial containg a form and that specific transaction item is returned, form is pre-populated with transaction data
    3. upon submitting this form, a POST request is sent to the same url (update-transaction) along with new data and pk of that transaction
    4. same view will check, if request type is POST, it will receive a form with updated data
    5. if form is valid, view will update the transaction item using the same instance (without creating new instance, this is important)
    6. if update was successful, a new partial with just a message will be returned (successful update message)
    7. if not, the update transaction form partial will be returned, this time along with form errors


pagination + infinite scroll process breakdown:
    new extension used for this feature: django-template-partials
    1. first, the queryset is paginated using the default paginator object provided by django
    (achieved some level of success, leaving the rest for later...)


plotly is based in plotly.js (a javascript framework).
it must be added to project using CDN or locally.



Proposal to encrypt transactions:

Right now everything in database about transaction table is plain visible.
This may be a security concern.

Feature to implement:

The amount field of the Transaction table must be encrypted (at least in the database)
Attemtping to try "django-fernet-encrypted-fields" package:
Installation: pip install django-fernet-encrypted-fields
set random salt key in settings.py (i will use secrets module to produce a random string) (this also must be moved to .env file probably):
> import secrets
> random_string = secrets.token_hex(16)
in models.py, replace the amount with EncryptedTextField from this package (EncryptedFloatField may be better for amount field)
make migrations, run them (database might throw errors because of existing records in db)

NOTE:
in version 1, we'll just try EncryptedFloatField
however it is recommended that for financial values we use decimal, and since this package does not have encrypted decimal field...
we'll try to make our own using EncryptedMixinField in version 2
problem #01 during version 1: EncryptedFloatField does not have max_digits or decimal_places arguments
migration was made and ran with no problem so far.
result of version 1:
everything seems to be ok, looked at the database, amount field for the new records are actually encrypted.
the filters work as well.
committing...



we can also add rest api